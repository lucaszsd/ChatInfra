/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package server.chat_infra;

import java.io.*;
import java.net.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author lider
 */
public class Server extends javax.swing.JFrame {

    ArrayList<String> users;
    ArrayList clientOutputStreams;
    Thread start;
    
    
    
    /**
     * Creates new form Server
     */
    public Server() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        turnOnButton = new javax.swing.JButton();
        turnOffButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        serverInfo = new javax.swing.JList<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        serverLog = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        turnOnButton.setText("Ligar");
        turnOnButton.setToolTipText("Ligar");
        turnOnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                turnOnButtonActionPerformed(evt);
            }
        });

        turnOffButton.setText("Desligar");
        turnOffButton.setToolTipText("Desligar");
        turnOffButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                turnOffButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(turnOnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(turnOffButton, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(turnOffButton, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
            .addComponent(turnOnButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        serverInfo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Server Info", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        serverInfo.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Server IP: ", "Status: Off", "Users: 0", "User List:", " " };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        serverInfo.setFocusable(false);
        jScrollPane3.setViewportView(serverInfo);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE)
        );

        serverLog.setEditable(false);
        serverLog.setColumns(1);
        serverLog.setRows(1);
        serverLog.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Server Log", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        jScrollPane1.setViewportView(serverLog);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void turnOnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_turnOnButtonActionPerformed
        // TODO add your handling code here:
        start = new Thread(new serverStart());
        start.start();
        
    }//GEN-LAST:event_turnOnButtonActionPerformed

    private void turnOffButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_turnOffButtonActionPerformed
        // TODO add your handling code here:
        Disconnect();
    }//GEN-LAST:event_turnOffButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Server().setVisible(true);
        });
    }
    
    public void setServerStatus(String User){
        InetAddress local;
        try {
            local = InetAddress.getLocalHost();
            if (User.equals("")) {
                String[] listData = {"Server IP: " + local.getHostAddress(), "Status: On", "Users: 0", "User List: "};
                serverInfo.setListData(listData);
            } else if (User.equalsIgnoreCase("--")){
                String[] listData = {"Server IP: " + local.getHostAddress(), "Status: Off", "Users: " + users.size(), "User List: \n"};
                serverInfo.setListData(listData);
                for (int x = 0; x < users.size(); x++) {
                    String[] aux = new String[listData.length + 1];
                    System.arraycopy(listData, 0, aux, 0, listData.length);
                    aux[listData.length] = users.get(x);
                    serverInfo.setListData(aux);
                    listData = aux;
                }
            } else {
                String[] listData = {"Server IP: " + local.getHostAddress(), "Status: On", "Users: " + users.size(), "User List: \n"};
                serverInfo.setListData(listData);
                for (int x = 0; x < users.size(); x++) {
                    String[] aux = new String[listData.length + 1];
                    System.arraycopy(listData, 0, aux, 0, listData.length);
                    aux[listData.length] = users.get(x);
                    serverInfo.setListData(aux);
                    listData = aux;
                }
                serverLog.append("-==================================-" + "\n");
            }
        } catch (UnknownHostException ex) {
            serverLog.append("Server status error!");
        }
        
        
    }

    private void Disconnect() {
        if (start.isAlive()) {
            setServerStatus("--");
            start.interrupt();
            serverLog.append("Server disconnected");
        } else {
            serverLog.append("Server already disconnected");
        }
        
    }
    
    public class serverStart implements Runnable {

        @Override
        public void run() {
            clientOutputStreams = new ArrayList();
            users = new ArrayList();
            
            try {
                ServerSocket serverSocket = new ServerSocket(3000);
                //InetAddress local = InetAddress.getLocalHost();
                serverLog.append("------Connected------\n");
                setServerStatus("");
                while (true) {
                    Socket socket = serverSocket.accept();
                    PrintWriter writer = new PrintWriter(socket.getOutputStream());
                    clientOutputStreams.add(writer);
                    
                    Thread listener = new Thread(new ClientHandler(socket, writer));
                    listener.start();
                    //socket.getInputStream();
                }
            } catch (IOException ex) {
                serverLog.append("Conection error!\n");
            }
            
        }
        
        
    }
    
    public class ClientHandler implements Runnable {
        BufferedReader reader;
        Socket websocket;
        PrintWriter client;
        public ClientHandler(Socket socket, PrintWriter user) {
            client = user;
            try {
                websocket = socket;
                InputStreamReader leitor = new InputStreamReader(websocket.getInputStream());
                reader = new BufferedReader(leitor);
            } catch (IOException ex) {
                System.out.println("[Servidor] Erro inesperado");
            }
            
        }

        @Override
        public void run() {
            String message, connect="Connect", disconnect="Disconnect", chat="Chat", 
                    userList = "getUsers";
            String[] data;
            
            try {
                while ((message = reader.readLine()) != null) {
                    data = message.split(":");
                    for(String token:data) {
                        serverLog.append(token + "\n");
                    }
                    if (data[2].equals(connect)) {
                        userAdd(data[0]);
                        setServerStatus(data[0]);
                    } else if (data[2].equals(disconnect)){
                        //sendMsg((data[0] + ":has disconnected." + ":" + chat));
                        userRemove(data[0]);
                    } else if (data[2].equals(chat)) {
                        sendMsg(message);
                    } else if (data[2].equals(userList)) {
                        String[] tempList = new String[(users.size())];
                        users.toArray(tempList);
                        for (String token : tempList) {
                            message = ("a:" + token + ":userList");
                            System.out.println(message);
                            sendMsg(message);
						} 
                    } else {
                        serverLog.append("Message error!\n");
                    }
                }
            } catch (IOException ex) {
                System.out.println("[Servidor] Conexão perdida");
                clientOutputStreams.remove(client);
            }
        }

        public void userAdd(String data) {
            String message, add=": :Connect", done="Server: :Done", name = data;
            users.add(name);
            String[] tempList = new String[users.size()];
            users.toArray(tempList);
            for (String token:tempList) {
                message = (token+add);
                sendMsg(message);
            }
            sendMsg(done);
        }

        private void sendMsg(String message) {
            Iterator it = clientOutputStreams.iterator();
            while (it.hasNext()) {
		try {
                    PrintWriter writer = (PrintWriter) it.next();
                    writer.println(message);
                    // ta_chat.append("Sending: " + message + "\n");
                    System.out.println("Sending: " + message + "\n");
                    writer.flush();
                    serverLog.setCaretPosition(serverLog.getDocument().getLength());
        	} catch (Exception ex) {
                    // ta_chat.append("Error telling everyone. \n");
                    System.out.println("Erro ao enviar mensagem aos usuários");
		}
            }
	
        }

        private void userRemove(String data) {
            String message, add = ": :Connect", done = "Server: :Done", name = data;
		users.remove(name);
		String[] tempList = new String[(users.size())];
		users.toArray(tempList);

		for (String token : tempList) {
			message = (token + add);
			sendMsg(message);
		}
		sendMsg(done);
        }
        
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<String> serverInfo;
    private javax.swing.JTextArea serverLog;
    private javax.swing.JButton turnOffButton;
    private javax.swing.JButton turnOnButton;
    // End of variables declaration//GEN-END:variables
}
